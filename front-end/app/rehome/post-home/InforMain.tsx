import React, { useState } from 'react';
import AddressModal from './AddressModal';

type PriceUnit = 'VNƒê' | 'Gi√° / m¬≤' | 'Gi√° / th√°ng' | 'Gi√° / nƒÉm' | 'Tho·∫£ thu·∫≠n';

type Props = {
    address: string;
    area: string;
    price: string;
    priceUnit: PriceUnit;
    setArea: (value: string) => void;
    setPrice: (value: string) => void;
    setPriceUnit: (value: PriceUnit) => void;
    setAddress: (value: string) => void;
    selectedOption: 'B√°n' | 'Cho thu√™';
};

const InforMain = ({
    address,
    area,
    price,
    priceUnit,
    setArea,
    setPrice,
    setPriceUnit,
    selectedOption,
    setAddress,
}: Props) => {
    const priceUnitsForSale: PriceUnit[] = ['VNƒê', 'Gi√° / m¬≤', 'Tho·∫£ thu·∫≠n'];
    const priceUnitsForRent: PriceUnit[] = ['Gi√° / th√°ng', 'Gi√° / nƒÉm', 'Tho·∫£ thu·∫≠n'];
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);
    const [suggestedPrices, setSuggestedPrices] = useState<string[]>([]);

    const toggleDropdown = () => {
        setIsDropdownOpen(!isDropdownOpen);
    };

    const handleAddressSelect = (newAddress: string) => {
        setAddress(newAddress);
        setIsAddressModalOpen(false);
    };

    const handlePriceChange = (inputValue: string) => {
        setPrice(inputValue);
        const numericValue = parseInt(inputValue.replace(/\./g, '').replace(/,/g, ''));
        if (!isNaN(numericValue)) {
            const newSuggestions = [
                (numericValue * 1000).toLocaleString('vi-VN'),
                (numericValue * 10000).toLocaleString('vi-VN'),
                (numericValue * 100000).toLocaleString('vi-VN'),
                (numericValue * 1000000).toLocaleString('vi-VN'),
            ];
            setSuggestedPrices(newSuggestions);
        } else {
            setSuggestedPrices([]);
        }
    };

    const handlePriceSuggestionClick = (suggestedPrice: string) => {
        setPrice(suggestedPrice);
        setSuggestedPrices([]);
    };

    const calculateTotalValue = () => {
        const numericPrice = parseInt(price.replace(/\./g, '').replace(/,/g, ''));
        const numericArea = parseInt(area.replace(/\./g, '').replace(/,/g, ''));

        // Ki·ªÉm tra xem gi√° v√† di·ªán t√≠ch c√≥ h·ª£p l·ªá kh√¥ng
        if (!isNaN(numericArea) && numericArea > 0 && !isNaN(numericPrice)) {
            let totalValue = 0;
            let pricePerM2 = 0;

            if (priceUnit === 'Gi√° / m¬≤') {
                pricePerM2 = numericPrice; // Gi√° tr√™n m¬≤
                totalValue = pricePerM2 * numericArea; // T√≠nh t·ªïng tr·ªã gi√°
            } else if (priceUnit === 'VNƒê') {
                totalValue = numericPrice; // T·ªïng tr·ªã gi√° b·∫±ng gi√° nh·∫≠p v√†o
                pricePerM2 = Math.round(totalValue / numericArea); // T√≠nh gi√° tr√™n m¬≤
            } else if (priceUnit === 'Tho·∫£ thu·∫≠n') {
                return { totalValue: 0, pricePerM2: 0 }; // Tr·∫£ v·ªÅ 0 cho t·ªïng tr·ªã gi√° v√† gi√° tr√™n m¬≤
            }

            return { totalValue, pricePerM2 };
        }

        // Tr·∫£ v·ªÅ 0 n·∫øu di·ªán t√≠ch kh√¥ng h·ª£p l·ªá ho·∫∑c gi√° kh√¥ng h·ª£p l·ªá
        return { totalValue: 0, pricePerM2: 0 };
    };

    const { totalValue, pricePerM2 } = calculateTotalValue();

    return (
        <div className="bg-gray-100 p-4 rounded-lg">
            <label className="block text-black font-medium mb-2">ƒê·ªãa ch·ªâ BƒêS</label>
            <div className="flex items-center border rounded-lg p-2 mb-4">
                <span className="mr-2 text-gray-500">üîç</span>
                <input
                    type="text"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                    className="w-full p-2 outline-none bg-transparent cursor-pointer"
                    value={address}
                    onClick={() => setIsAddressModalOpen(true)}
                    readOnly
                />
            </div>

            {isAddressModalOpen && (
                <AddressModal
                    onClose={() => setIsAddressModalOpen(false)}
                    onAddressSelect={handleAddressSelect}
                />
            )}

            <h2 className="text-lg font-bold mb-4">Th√¥ng tin ch√≠nh</h2>
            <label className="block text-black font-medium mb-2">Lo·∫°i BƒêS</label>
            <select
                value={selectedOption}
                onChange={(e) => setPriceUnit(e.target.value as PriceUnit)}
                className="w-full p-2 border rounded-lg mb-4"
            >
                <option value="">Ch·ªçn lo·∫°i BƒêS</option>
                <option value="CƒÉn h·ªô">CƒÉn h·ªô</option>
                <option value="Nh√† ph·ªë">Nh√† ph·ªë</option>
                <option value="Bi·ªát th·ª±">Bi·ªát th·ª±</option>
                <option value="ƒê·∫•t n·ªÅn">ƒê·∫•t n·ªÅn</option>
            </select>

            <label className="block text-black font-medium mb-2">Di·ªán t√≠ch (m¬≤)</label>
            <div className="flex items-center mb-4">
                <input
                    type="text"
                    placeholder="Nh·∫≠p di·ªán t√≠ch"
                    className="w-2/3 p-2 border rounded-lg mr-2"
                    value={area}
                    onChange={(e) => {
                        setArea(e.target.value);
                        calculateTotalValue(); // G·ªçi l·∫°i t√≠nh to√°n khi di·ªán t√≠ch thay ƒë·ªïi
                    }}
                />
                <span className="text-gray-500">m¬≤</span>
            </div>

            <label className="block text-black font-medium mb-2">M·ª©c gi√°</label>
            <div className="flex flex-col mb-4">
                <div className="flex items-center mb-2">
                    <input
                        type="text"
                        placeholder="Nh·∫≠p m·ª©c gi√°"
                        className="w-2/3 p-2 border rounded-lg mr-2"
                        value={priceUnit === 'Tho·∫£ thu·∫≠n' ? 'Gi√° th·ªèa thu·∫≠n' : price}
                        onChange={(e) => {
                            handlePriceChange(e.target.value);
                            calculateTotalValue(); // G·ªçi l·∫°i t√≠nh to√°n khi gi√° thay ƒë·ªïi
                        }}
                        disabled={priceUnit === 'Tho·∫£ thu·∫≠n'} // Kh√≥a nh·∫≠p khi ch·ªçn th·ªèa thu·∫≠n
                    />
                    <div className="relative w-1/3">
                        <div className="border rounded-lg cursor-pointer" onClick={toggleDropdown}>
                            <div className="flex justify-between p-2">
                                <span>{priceUnit}</span>
                                <span className="text-gray-500">‚ñº</span>
                            </div>
                        </div>
                        {isDropdownOpen && (
                            <div className="absolute left-0 right-0 bg-white border rounded-lg mt-1 z-10">
                                {(selectedOption === 'B√°n' ? priceUnitsForSale : priceUnitsForRent).map(unit => (
                                    <label key={unit} className="flex items-center p-2">
                                        <input
                                            type="radio"
                                            value={unit}
                                            checked={priceUnit === unit}
                                            onChange={() => setPriceUnit(unit)}
                                            className="mr-2"
                                        />
                                        <span>{unit}</span>
                                    </label>
                                ))}
                            </div>
                        )}
                    </div>
                </div>

                {/* Hi·ªÉn th·ªã g·ª£i √Ω ch·ªâ khi kh√¥ng ch·ªçn "Tho·∫£ thu·∫≠n" */}
                {priceUnit !== 'Tho·∫£ thu·∫≠n' && suggestedPrices.length > 0 && (
                    <div className="flex space-x-2">
                        {suggestedPrices.map((suggestion) => (
                            <button
                                key={suggestion}
                                onClick={() => handlePriceSuggestionClick(suggestion)}
                                className="border p-2 rounded-lg bg-white text-gray-700"
                            >
                                {suggestion}
                            </button>
                        ))}
                    </div>
                )}
            </div>

            {priceUnit !== 'Tho·∫£ thu·∫≠n' && (
                    <div className="mt-4 text-gray-700">
                        <p>
                            T·ªïng tr·ªã gi√°: {totalValue >= 1e9 
                                ? (totalValue / 1e9).toLocaleString('vi-VN') + ' t·ª∑' 
                                : (totalValue / 1e6).toLocaleString('vi-VN') + ' tri·ªáu'} 
                            (T·ªïng tr·ªã gi√° ~{pricePerM2 
                                ? (pricePerM2 >= 1e9 
                                    ? (pricePerM2 / 1e9).toLocaleString('vi-VN') + ' t·ª∑/m¬≤' 
                                    : (pricePerM2 / 1e6).toLocaleString('vi-VN') + ' tri·ªáu/m¬≤') 
                                : '0 /m¬≤'}) 
                        </p>
                    </div>
                )}

        </div>
    );
};

export default InforMain;
